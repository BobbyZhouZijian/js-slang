// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test calling a builtin in tail position that doesn't return a function: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() {
  return getNonFunction()();
}
f();",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": 1,
      "location": SourceLocation {
        "end": Position {
          "column": 27,
          "line": 2,
        },
        "start": Position {
          "column": 9,
          "line": 2,
        },
      },
      "node": Node {
        "arguments": Array [],
        "callee": Node {
          "arguments": Array [],
          "callee": Node {
            "end": 38,
            "loc": SourceLocation {
              "end": Position {
                "column": 23,
                "line": 2,
              },
              "start": Position {
                "column": 9,
                "line": 2,
              },
            },
            "name": "getNonFunction",
            "start": 24,
            "type": "Identifier",
          },
          "end": 40,
          "loc": SourceLocation {
            "end": Position {
              "column": 25,
              "line": 2,
            },
            "start": Position {
              "column": 9,
              "line": 2,
            },
          },
          "start": 24,
          "type": "CallExpression",
        },
        "end": 42,
        "loc": SourceLocation {
          "end": Position {
            "column": 27,
            "line": 2,
          },
          "start": Position {
            "column": 9,
            "line": 2,
          },
        },
        "start": 24,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 2: Calling non-function value 1.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
(( <globals redacted> ) => {
  return (() => {
    const f = wrap(() => {
      return {
        isTail: true,
        function: callIfFuncAndRightArgs(getNonFunction, 2, 9),
        functionName: \\"<anonymous>\\",
        arguments: [],
        line: 2,
        column: 9
      };
    }, \\"function f() {\\\\n  return getNonFunction()();\\\\n}\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(f, 4, 0);\\");
    native.globals.set(\\"f\\", {
      kind: \\"const\\",
      value: f
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;
