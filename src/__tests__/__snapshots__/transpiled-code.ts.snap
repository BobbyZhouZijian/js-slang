// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Ensure no name clashes 1`] = `
"const native0 = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs0 = native.operators.get(\\"callIfFuncAndRightArgs0\\");
const boolOrErr0 = native.operators.get(\\"boolOrErr0\\");
const wrap90 = native.operators.get(\\"wrap90\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
(( <globals redacted> ) => {
  return (() => {
    {
      const runtime = native.globals.previousScope.variables.get(\\"runtime\\").value;
      const display = native.globals.previousScope.variables.get(\\"display\\").value;
      const raw_display = native.globals.previousScope.variables.get(\\"raw_display\\").value;
      const stringify = native.globals.previousScope.variables.get(\\"stringify\\").value;
      const error = native.globals.previousScope.variables.get(\\"error\\").value;
      const prompt = native.globals.previousScope.variables.get(\\"prompt\\").value;
      const is_number = native.globals.previousScope.variables.get(\\"is_number\\").value;
      const is_string = native.globals.previousScope.variables.get(\\"is_string\\").value;
      const is_function = native.globals.previousScope.variables.get(\\"is_function\\").value;
      const is_boolean = native.globals.previousScope.variables.get(\\"is_boolean\\").value;
      const is_undefined = native.globals.previousScope.variables.get(\\"is_undefined\\").value;
      const parse_int = native.globals.previousScope.variables.get(\\"parse_int\\").value;
      const undefined = native.globals.previousScope.variables.get(\\"undefined\\").value;
      const NaN = native.globals.previousScope.variables.get(\\"NaN\\").value;
      const Infinity = native.globals.previousScope.variables.get(\\"Infinity\\").value;
      const math_abs = native.globals.previousScope.variables.get(\\"math_abs\\").value;
      const math_acos = native.globals.previousScope.variables.get(\\"math_acos\\").value;
      const math_acosh = native.globals.previousScope.variables.get(\\"math_acosh\\").value;
      const math_asin = native.globals.previousScope.variables.get(\\"math_asin\\").value;
      const math_asinh = native.globals.previousScope.variables.get(\\"math_asinh\\").value;
      const math_atan = native.globals.previousScope.variables.get(\\"math_atan\\").value;
      const math_atanh = native.globals.previousScope.variables.get(\\"math_atanh\\").value;
      const math_atan2 = native.globals.previousScope.variables.get(\\"math_atan2\\").value;
      const math_ceil = native.globals.previousScope.variables.get(\\"math_ceil\\").value;
      const math_cbrt = native.globals.previousScope.variables.get(\\"math_cbrt\\").value;
      const math_expm1 = native.globals.previousScope.variables.get(\\"math_expm1\\").value;
      const math_clz32 = native.globals.previousScope.variables.get(\\"math_clz32\\").value;
      const math_cos = native.globals.previousScope.variables.get(\\"math_cos\\").value;
      const math_cosh = native.globals.previousScope.variables.get(\\"math_cosh\\").value;
      const math_exp = native.globals.previousScope.variables.get(\\"math_exp\\").value;
      const math_floor = native.globals.previousScope.variables.get(\\"math_floor\\").value;
      const math_fround = native.globals.previousScope.variables.get(\\"math_fround\\").value;
      const math_hypot = native.globals.previousScope.variables.get(\\"math_hypot\\").value;
      const math_imul = native.globals.previousScope.variables.get(\\"math_imul\\").value;
      const math_log = native.globals.previousScope.variables.get(\\"math_log\\").value;
      const math_log1p = native.globals.previousScope.variables.get(\\"math_log1p\\").value;
      const math_log2 = native.globals.previousScope.variables.get(\\"math_log2\\").value;
      const math_log10 = native.globals.previousScope.variables.get(\\"math_log10\\").value;
      const math_max = native.globals.previousScope.variables.get(\\"math_max\\").value;
      const math_min = native.globals.previousScope.variables.get(\\"math_min\\").value;
      const math_pow = native.globals.previousScope.variables.get(\\"math_pow\\").value;
      const math_random = native.globals.previousScope.variables.get(\\"math_random\\").value;
      const math_round = native.globals.previousScope.variables.get(\\"math_round\\").value;
      const math_sign = native.globals.previousScope.variables.get(\\"math_sign\\").value;
      const math_sin = native.globals.previousScope.variables.get(\\"math_sin\\").value;
      const math_sinh = native.globals.previousScope.variables.get(\\"math_sinh\\").value;
      const math_sqrt = native.globals.previousScope.variables.get(\\"math_sqrt\\").value;
      const math_tan = native.globals.previousScope.variables.get(\\"math_tan\\").value;
      const math_tanh = native.globals.previousScope.variables.get(\\"math_tanh\\").value;
      const math_trunc = native.globals.previousScope.variables.get(\\"math_trunc\\").value;
      const math_E = native.globals.previousScope.variables.get(\\"math_E\\").value;
      const math_LN10 = native.globals.previousScope.variables.get(\\"math_LN10\\").value;
      const math_LN2 = native.globals.previousScope.variables.get(\\"math_LN2\\").value;
      const math_LOG10E = native.globals.previousScope.variables.get(\\"math_LOG10E\\").value;
      const math_LOG2E = native.globals.previousScope.variables.get(\\"math_LOG2E\\").value;
      const math_PI = native.globals.previousScope.variables.get(\\"math_PI\\").value;
      const math_SQRT1_2 = native.globals.previousScope.variables.get(\\"math_SQRT1_2\\").value;
      const math_SQRT2 = native.globals.previousScope.variables.get(\\"math_SQRT2\\").value;
      const pair = native.globals.previousScope.variables.get(\\"pair\\").value;
      const is_pair = native.globals.previousScope.variables.get(\\"is_pair\\").value;
      const head = native.globals.previousScope.variables.get(\\"head\\").value;
      const tail = native.globals.previousScope.variables.get(\\"tail\\").value;
      const is_null = native.globals.previousScope.variables.get(\\"is_null\\").value;
      const list = native.globals.previousScope.variables.get(\\"list\\").value;
      const draw_data = native.globals.previousScope.variables.get(\\"draw_data\\").value;
      const set_head = native.globals.previousScope.variables.get(\\"set_head\\").value;
      const set_tail = native.globals.previousScope.variables.get(\\"set_tail\\").value;
      const array_length = native.globals.previousScope.variables.get(\\"array_length\\").value;
      const is_array = native.globals.previousScope.variables.get(\\"is_array\\").value;
      const stream_tail = native.globals.previousScope.variables.get(\\"stream_tail\\").value;
      const stream = native.globals.previousScope.variables.get(\\"stream\\").value;
      const list_to_stream = native.globals.previousScope.variables.get(\\"list_to_stream\\").value;
      const parse = native.globals.previousScope.variables.get(\\"parse\\").value;
      const apply_in_underlying_javascript = native.globals.previousScope.variables.get(\\"apply_in_underlying_javascript\\").value;
      {
        setProp(boolOrErr, 123, 1, 1, 0);
        const f = wrap90(callIfFuncAndRightArgs => {
          let wrap = 2;
          wrap0;
          wrap1;
          wrap2;
          wrap3;
          wrap4;
          wrap5;
          wrap6;
          wrap7;
          wrap8;
          wrap9;
        }, \\"function f(callIfFuncAndRightArgs) {\\\\n  let wrap = 2;\\\\n  wrap0;\\\\n  wrap1;\\\\n  wrap2;\\\\n  wrap3;\\\\n  wrap4;\\\\n  wrap5;\\\\n  wrap6;\\\\n  wrap7;\\\\n  wrap8;\\\\n  wrap9;\\\\n}\\");
        lastStatementResult = eval(\\"native;\\");
        native.globals.variables.set(\\"f\\", {
          kind: \\"const\\",
          value: f,
          assignNewValue: unique => {
            return f = this.value = unique;
          }
        });
      }
    }
    return lastStatementResult;
  })();
})();
"
`;

exports[`builtins do get prepended 1`] = `
Object {
  "code": "ensure_builtins;",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
(( <globals redacted> ) => {
  return (() => {
    {
      const runtime = native.globals.previousScope.variables.get(\\"runtime\\").value;
      const display = native.globals.previousScope.variables.get(\\"display\\").value;
      const raw_display = native.globals.previousScope.variables.get(\\"raw_display\\").value;
      const stringify = native.globals.previousScope.variables.get(\\"stringify\\").value;
      const error = native.globals.previousScope.variables.get(\\"error\\").value;
      const prompt = native.globals.previousScope.variables.get(\\"prompt\\").value;
      const is_number = native.globals.previousScope.variables.get(\\"is_number\\").value;
      const is_string = native.globals.previousScope.variables.get(\\"is_string\\").value;
      const is_function = native.globals.previousScope.variables.get(\\"is_function\\").value;
      const is_boolean = native.globals.previousScope.variables.get(\\"is_boolean\\").value;
      const is_undefined = native.globals.previousScope.variables.get(\\"is_undefined\\").value;
      const parse_int = native.globals.previousScope.variables.get(\\"parse_int\\").value;
      const undefined = native.globals.previousScope.variables.get(\\"undefined\\").value;
      const NaN = native.globals.previousScope.variables.get(\\"NaN\\").value;
      const Infinity = native.globals.previousScope.variables.get(\\"Infinity\\").value;
      const math_abs = native.globals.previousScope.variables.get(\\"math_abs\\").value;
      const math_acos = native.globals.previousScope.variables.get(\\"math_acos\\").value;
      const math_acosh = native.globals.previousScope.variables.get(\\"math_acosh\\").value;
      const math_asin = native.globals.previousScope.variables.get(\\"math_asin\\").value;
      const math_asinh = native.globals.previousScope.variables.get(\\"math_asinh\\").value;
      const math_atan = native.globals.previousScope.variables.get(\\"math_atan\\").value;
      const math_atanh = native.globals.previousScope.variables.get(\\"math_atanh\\").value;
      const math_atan2 = native.globals.previousScope.variables.get(\\"math_atan2\\").value;
      const math_ceil = native.globals.previousScope.variables.get(\\"math_ceil\\").value;
      const math_cbrt = native.globals.previousScope.variables.get(\\"math_cbrt\\").value;
      const math_expm1 = native.globals.previousScope.variables.get(\\"math_expm1\\").value;
      const math_clz32 = native.globals.previousScope.variables.get(\\"math_clz32\\").value;
      const math_cos = native.globals.previousScope.variables.get(\\"math_cos\\").value;
      const math_cosh = native.globals.previousScope.variables.get(\\"math_cosh\\").value;
      const math_exp = native.globals.previousScope.variables.get(\\"math_exp\\").value;
      const math_floor = native.globals.previousScope.variables.get(\\"math_floor\\").value;
      const math_fround = native.globals.previousScope.variables.get(\\"math_fround\\").value;
      const math_hypot = native.globals.previousScope.variables.get(\\"math_hypot\\").value;
      const math_imul = native.globals.previousScope.variables.get(\\"math_imul\\").value;
      const math_log = native.globals.previousScope.variables.get(\\"math_log\\").value;
      const math_log1p = native.globals.previousScope.variables.get(\\"math_log1p\\").value;
      const math_log2 = native.globals.previousScope.variables.get(\\"math_log2\\").value;
      const math_log10 = native.globals.previousScope.variables.get(\\"math_log10\\").value;
      const math_max = native.globals.previousScope.variables.get(\\"math_max\\").value;
      const math_min = native.globals.previousScope.variables.get(\\"math_min\\").value;
      const math_pow = native.globals.previousScope.variables.get(\\"math_pow\\").value;
      const math_random = native.globals.previousScope.variables.get(\\"math_random\\").value;
      const math_round = native.globals.previousScope.variables.get(\\"math_round\\").value;
      const math_sign = native.globals.previousScope.variables.get(\\"math_sign\\").value;
      const math_sin = native.globals.previousScope.variables.get(\\"math_sin\\").value;
      const math_sinh = native.globals.previousScope.variables.get(\\"math_sinh\\").value;
      const math_sqrt = native.globals.previousScope.variables.get(\\"math_sqrt\\").value;
      const math_tan = native.globals.previousScope.variables.get(\\"math_tan\\").value;
      const math_tanh = native.globals.previousScope.variables.get(\\"math_tanh\\").value;
      const math_trunc = native.globals.previousScope.variables.get(\\"math_trunc\\").value;
      const math_E = native.globals.previousScope.variables.get(\\"math_E\\").value;
      const math_LN10 = native.globals.previousScope.variables.get(\\"math_LN10\\").value;
      const math_LN2 = native.globals.previousScope.variables.get(\\"math_LN2\\").value;
      const math_LOG10E = native.globals.previousScope.variables.get(\\"math_LOG10E\\").value;
      const math_LOG2E = native.globals.previousScope.variables.get(\\"math_LOG2E\\").value;
      const math_PI = native.globals.previousScope.variables.get(\\"math_PI\\").value;
      const math_SQRT1_2 = native.globals.previousScope.variables.get(\\"math_SQRT1_2\\").value;
      const math_SQRT2 = native.globals.previousScope.variables.get(\\"math_SQRT2\\").value;
      const pair = native.globals.previousScope.variables.get(\\"pair\\").value;
      const is_pair = native.globals.previousScope.variables.get(\\"is_pair\\").value;
      const head = native.globals.previousScope.variables.get(\\"head\\").value;
      const tail = native.globals.previousScope.variables.get(\\"tail\\").value;
      const is_null = native.globals.previousScope.variables.get(\\"is_null\\").value;
      const list = native.globals.previousScope.variables.get(\\"list\\").value;
      const draw_data = native.globals.previousScope.variables.get(\\"draw_data\\").value;
      const set_head = native.globals.previousScope.variables.get(\\"set_head\\").value;
      const set_tail = native.globals.previousScope.variables.get(\\"set_tail\\").value;
      const array_length = native.globals.previousScope.variables.get(\\"array_length\\").value;
      const is_array = native.globals.previousScope.variables.get(\\"is_array\\").value;
      const stream_tail = native.globals.previousScope.variables.get(\\"stream_tail\\").value;
      const stream = native.globals.previousScope.variables.get(\\"stream\\").value;
      const list_to_stream = native.globals.previousScope.variables.get(\\"list_to_stream\\").value;
      const parse = native.globals.previousScope.variables.get(\\"parse\\").value;
      const apply_in_underlying_javascript = native.globals.previousScope.variables.get(\\"apply_in_underlying_javascript\\").value;
      {
        lastStatementResult = eval(\\"ensure_builtins;\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
}
`;
